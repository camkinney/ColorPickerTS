{"version":3,"sources":["ColorModule.ts","ColorDisplay.tsx","HueSlider.tsx","ColorMatrix.tsx","PlusMinusTextInput.tsx","styles/SharedCompStyles.ts","RGBInput.tsx","HSVInput.tsx","HexInput.tsx","SavedColor.tsx","ColorPicker.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RGB","HSV","HSVValues","h","s","v","this","RGBValues","r","g","b","HexToRGB","hexValue","length","substring","diff","repeat","remainder","decimalValue","parseInt","Math","floor","RGBToHSV","rgbValues","maxColor","max","min","calculateH","calculateS","calculateV","round","formatNumString","numStr","high","formattedNum","RGBToHex","numTo2DigitHex","num","hex","toString","HSVToRGB","hsvValues","i","f","p","q","t","ColorDiv","styled","div","props","backgroundColor","ColorDisplay","Color","Slider","input","HueSlider","type","value","onChange","event","newHue","target","newHSVValues","handleColorChange","GradientDivOuter","hexVal","GradientDivInner","CurrentLocDiv","left","top","ColorMatrix","offsetTop","offsetLeft","saturation","gradDiv","React","useRef","fullyVividHex","current","onClick","clickEvent","currentHue","trueX","pageX","trueY","pageY","newSaturation","newValue","convertClickToNewHSV","ref","BtnTopRight","button","BtnBottomLeft","BtnContainer","TextInput","PlusMinusTextInput","id","handleChange","newValueStr","PlusMinusLabel","label","InputLabelPair","RGBInput","bind","changedValue","formattedValue","old","changedVal","changedRGB","newRGBValues","htmlFor","toUpperCase","Component","HSVInput","changedHSV","formattedChangedVal","HexContainer","HexPrefix","HexField","HexInput","ColorSquare","SavedColor","useState","selectedColor","setSelectedColor","selectedColorFormatted","_event","onContextMenu","preventDefault","FixedWidthInlineBlock","width","PctWidthInlineBlock","ColorPicker","state","newValues","setState","AppContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uIAyBYA,EAMAC,E,kFA/BCC,EAKT,WAAaC,EAAWC,EAAWC,GAAY,yBAJxCF,OAIuC,OAHvCC,OAGuC,OAFvCC,OAEuC,EAC5CC,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,GAIFE,EAKT,WAAaC,EAAWC,EAAWC,GAAY,yBAJxCF,OAIuC,OAHvCC,OAGuC,OAFvCC,OAEuC,EAC5CJ,KAAKE,EAAIA,EACTF,KAAKG,EAAIA,EACTH,KAAKI,EAAIA,GAgCR,SAASC,EAASC,GACrB,GAAIA,EAASC,OAAS,EAClBD,EAAWA,EAASE,UAAUF,EAASC,OAAS,QAC7C,GAAID,EAASC,OAAS,EAAG,CAC5B,IAAIE,EAAO,EAAIH,EAASC,OACxBD,EAAW,IAAII,OAAOD,GAAQH,EAElC,IACIK,EADAC,EAAuBC,SAASP,EAAU,IAE1CJ,EAAYY,KAAKC,MAAMH,EAAa,OACxCD,EAAYC,EAAa,MACzB,IAAIT,EAAYW,KAAKC,MAAMJ,EAAU,KAGrC,OAAO,IAAIV,EAAUC,EAAGC,EAFxBQ,GAAsB,KAUnB,SAASK,EAASC,GACrB,IAIIpB,EACAC,EACAC,EANAG,EAAIe,EAAUf,EAAE,IAChBC,EAAIc,EAAUd,EAAE,IAChBC,EAAIa,EAAUb,EAAE,IAMhBc,EAAWJ,KAAKK,IAAIjB,EAAGY,KAAKK,IAAIhB,EAAEC,IAElCK,EAAOS,EADIJ,KAAKM,IAAIlB,EAAGY,KAAKM,IAAIjB,EAAEC,IAOtC,OAJAP,EAgBJ,SAAoBK,EAAWC,EAAWC,EAAWc,EAAkBT,GACnE,IAAIZ,EAEFA,EADW,IAATY,EACE,EAEGS,IAAahB,IACRC,EAAEC,GAAKK,EAAd,GAAsB,KAAK,IAEzBS,IAAaf,IACRC,EAAEF,GAAKO,EAAd,GAAsB,KAAK,IAEzBS,IAAad,IACRF,EAAEC,GAAKM,EAAd,GAAsB,KAAK,IAE5B,EAEN,OAAOZ,EAhCHwB,CAAWnB,EAAGC,EAAGC,EAAGc,EAAUT,GAClCX,EAwCJ,SAAoBoB,EAAkBT,GAClC,IAAIX,EAEFA,EADe,IAAboB,EACE,EAGCT,EAAOS,EAAY,IAE1B,OAAOpB,EAhDHwB,CAAWJ,EAAUT,GACzBV,EAuDJ,SAAoBmB,GAEhB,OADmB,IAAXA,EAxDJK,CAAWL,GAER,IAAItB,EAAUkB,KAAKU,MAAM3B,GAAIiB,KAAKU,MAAM1B,GAAIgB,KAAKU,MAAMzB,IA+D3D,SAAS0B,EAAgBC,EAAgBC,GAE5C,GAAe,IADFD,EAAOnB,OAEhB,OAAO,EAGX,IAAIqB,EAAef,SAASa,GAM5B,OAJIE,EAAeD,IACjBC,EAAeD,GAGVC,EAgBJ,SAASC,EAASZ,GAErB,OADgBa,EAAeb,EAAUf,GAAK4B,EAAeb,EAAUd,GAAK2B,EAAeb,EAAUb,GASzG,SAAS0B,EAAeC,GACpB,IAAIC,EAAMD,EAAIE,SAAS,IAIvB,OAHmB,IAAfD,EAAIzB,SACNyB,EAAM,IAAMA,GAEPA,EAiDJ,SAASE,EAASC,GACrB,IAAIjC,EAAGC,EAAGC,EACNgC,EACAC,EAAGC,EAAGC,EAAGC,EAGT3C,EAAIiB,KAAKK,IAAI,EAAGL,KAAKM,IAAI,IAAKe,EAAUtC,IACxCC,EAAIgB,KAAKK,IAAI,EAAGL,KAAKM,IAAI,IAAKe,EAAUrC,IACxCC,EAAIe,KAAKK,IAAI,EAAGL,KAAKM,IAAI,IAAKe,EAAUpC,IAK5C,GAFAA,GAAK,IAEI,KAHTD,GAAK,KAMD,OADAI,EAAIC,EAAIC,EAAIL,EACL,IAAIE,EAAUa,KAAKU,MAAU,IAAJtB,GAAUY,KAAKU,MAAU,IAAJrB,GAAUW,KAAKU,MAAU,IAAJpB,IAU9E,OAJAkC,EAAIvC,GAAK,EAAID,GACbyC,EAAIxC,GAAK,EAAID,GAFbuC,GAFAxC,GAAK,KACLuC,EAAItB,KAAKC,MAAMlB,MAIf2C,EAAIzC,GAAK,EAAID,GAAK,EAAIuC,IAEfD,GACH,KAAK,EACDlC,EAAIH,EACJI,EAAIqC,EACJpC,EAAIkC,EACJ,MACJ,KAAK,EACDpC,EAAIqC,EACJpC,EAAIJ,EACJK,EAAIkC,EACJ,MACJ,KAAK,EACDpC,EAAIoC,EACJnC,EAAIJ,EACJK,EAAIoC,EACJ,MACJ,KAAK,EACDtC,EAAIoC,EACJnC,EAAIoC,EACJnC,EAAIL,EACJ,MACJ,KAAK,EACDG,EAAIsC,EACJrC,EAAImC,EACJlC,EAAIL,EACJ,MACJ,QACIG,EAAIH,EACJI,EAAImC,EACJlC,EAAImC,EAGZ,OAAO,IAAItC,EAAUa,KAAKU,MAAU,IAAJtB,GAAUY,KAAKU,MAAU,IAAJrB,GAAUW,KAAKU,MAAU,IAAJpB,K,SAvRlEV,K,MAAAA,E,MAAAA,E,OAAAA,M,cAMAC,K,MAAAA,E,MAAAA,E,OAAAA,M,qOCnBZ,IAAM8C,EAAWC,IAAOC,IAAV,KAKW,SAAAC,GAAK,OAAIA,EAAMC,mBAazBC,MATf,SAAsBF,GAEpB,IAAMC,EAAmBE,EAAeH,EAAM3B,WAE9C,OACE,cAACwB,EAAD,CAAUI,gBAAiBA,K,82BCjB/B,IAAMG,EAASN,IAAOO,MAAV,KAuDGC,MAnBf,SAAmBN,GAYjB,OACE,mCACE,cAACI,EAAD,CAAQG,KAAK,QAAQ/B,IAAI,IAAID,IAAI,MAAMiC,MAAOR,EAAMT,UAAUtC,EAAGwD,SARhD,SAACC,GACpB,IAAIC,EAASD,EAAME,OAAOJ,MACtBK,EAAe,IAAIV,EAAgBlC,SAAS0C,GAASX,EAAMT,UAAUrC,EAAG8C,EAAMT,UAAUpC,GAC5F6C,EAAMc,kBAAkBD,S,6mBCzC5B,IAAME,EAAmBjB,IAAOC,IAAV,KAI8B,SAAAC,GAAK,OAAIA,EAAMgB,UAI7DC,EAAmBnB,IAAOC,IAAV,KAWhBmB,EAAgBpB,IAAOC,IAAV,KAET,SAAAC,GAAK,OAAIA,EAAMmB,QAChB,SAAAnB,GAAK,OAAIA,EAAMoB,OAgFTC,MA7Bf,SAAqBrB,GAEnB,IAN4BsB,EAAmBd,EATlBe,EAAoBC,EAe3CC,EAAUC,IAAMC,OAA8B,MAQhDC,EH+EK3C,EADoBK,EG9EM,IAAIa,EAAgBH,EAAMT,UAAUtC,EAAG,IAAK,OAE3EkE,EAAO,EACPC,EAAM,EAOV,OALIK,GAAWA,EAAQI,UA5BMN,EA6BEE,EAAQI,QAAQN,WA7BEC,EA6BUxB,EAAMT,UAAUrC,EAAzEiE,EA5BKI,EAAa,EAAIC,EAQIF,EAqBCG,EAAQI,QAAQP,UArBEd,EAqBSR,EAAMT,UAAUpC,EAAtEiE,EApBKE,EAAY,GAAK,IAAMd,IAwB5B,cAACO,EAAD,CAAkBC,OAAQY,EAA1B,SACE,cAACX,EAAD,CAAkBa,QAlBI,SAAEpB,GAC1B,IAAIG,EAhCR,SAA8BkB,EAAwBC,GACpD,IAAIC,EAAQF,EAAWG,MAAQH,EAAWnB,OAAOW,WAC7CY,EAAQJ,EAAWK,MAAQL,EAAWnB,OAAOU,UAC7Ce,EAAgBnE,KAAKC,MAAM8D,EAAM,GACjCK,EAAWpE,KAAKC,OAAO,IAAIgE,GAAO,GAEtC,OAAO,IAAIhC,EAAgB6B,EAAYK,EAAeC,GA0BjCC,CAAqB7B,EAAOV,EAAMT,UAAUtC,GAC/D+C,EAAMc,kBAAkBD,IAgBwB2B,IAAKf,EAAnD,SACI,cAACP,EAAD,CAAeC,KAAMA,EAAMC,IAAKA,S,2+BCnG1C,IAAMqB,EAAc3C,IAAO4C,OAAV,KASXC,EAAgB7C,IAAO4C,OAAV,KAQbE,EAAe9C,IAAOC,IAAV,KAWZ8C,EAAY/C,IAAOO,MAAV,KAwDAyC,MA3Cf,SAA4B9C,GAgC1B,OACA,qCACE,cAAC6C,EAAD,CAAWtC,KAAK,OAAOwC,GAAI/C,EAAM+C,GAAIvC,MAAOR,EAAMQ,MAAOC,SARlC,SAACC,GACxB,IAAIF,EAAQE,EAAME,OAAOJ,MACrBuC,EAAKrC,EAAME,OAAOmC,GACtB/C,EAAMgD,aAAaxC,EAAOuC,MAM1B,eAACH,EAAD,WACE,cAACH,EAAD,CAAaX,QA9BO,SAACpB,GACvB,IACIuC,GADWjD,EAAMQ,MAAM,GACAnB,WAC3BW,EAAMgD,aAAaC,EAAajD,EAAM+C,KA2BpC,eACA,cAACJ,EAAD,CAAeb,QArBM,SAACpB,GACxB,IACIuC,GADWjD,EAAMQ,MAAM,GACAnB,WAC3BW,EAAMgD,aAAaC,EAAajD,EAAM+C,KAkBpC,sB,iOCtFC,IAAMG,EAAiBpD,IAAOqD,MAAV,KAKdC,EAAiBtD,IAAOC,IAAV,KC6CZsD,E,kDAxCb,WAAYrD,GAAkB,IAAD,8BAC3B,cAAMA,IACDgD,aAAe,EAAKA,aAAaM,KAAlB,gBAFO,E,yDAShBC,EAAsBR,GACjC,IAAIS,EAAiBrD,EAAsBoD,EAAc,KACzD,GAAW,OAAPR,EAAJ,CAEA,INqL4BU,EAAgBC,EAAoBC,EMrL5DC,GNqLwBH,EMrLarG,KAAK4C,MAAM3B,UNqLRqF,EMrLmBF,GNqLCG,EMrLeZ,KNsL7DjG,EAAIQ,EACX,IAAID,EAAUqG,EAAYD,EAAIlG,EAAGkG,EAAIjG,GAEvCmG,IAAc7G,EAAIS,EAChB,IAAIF,EAAUoG,EAAInG,EAAGoG,EAAYD,EAAIjG,GAGrC,IAAIH,EAAUoG,EAAInG,EAAGmG,EAAIlG,EAAGmG,IM3LvCtG,KAAK4C,MAAMc,kBAAkB8C,M,+BAK7B,OACE,qCACE,eAACR,EAAD,WACE,eAACF,EAAD,CAAgBW,QAAS1D,EAAU7C,EAAnC,cAAyC6C,EAAU7C,EAAEwG,cAArD,OACA,cAAC,EAAD,CAAoBf,GAAI5C,EAAU7C,EAAGkD,MAAOpD,KAAK4C,MAAM3B,UAAUf,EAAG0F,aAAc5F,KAAK4F,kBAEzF,eAACI,EAAD,WACE,eAACF,EAAD,CAAgBW,QAAS1D,EAAU5C,EAAnC,cAAyC4C,EAAU5C,EAAEuG,cAArD,OACA,cAAC,EAAD,CAAoBf,GAAI5C,EAAU5C,EAAGiD,MAAOpD,KAAK4C,MAAM3B,UAAUd,EAAGyF,aAAc5F,KAAK4F,kBAEzF,eAACI,EAAD,WACE,eAACF,EAAD,CAAgBW,QAAS1D,EAAU3C,EAAnC,cAAyC2C,EAAU3C,EAAEsG,cAArD,OACA,cAAC,EAAD,CAAoBf,GAAI5C,EAAU3C,EAAGgD,MAAOpD,KAAK4C,MAAM3B,UAAUb,EAAGwF,aAAc5F,KAAK4F,yB,GAlC1EtB,IAAMqC,WCuCdC,E,kDArCb,WAAYhE,GAAkB,IAAD,8BAC3B,cAAMA,IACDgD,aAAe,EAAKA,aAAaM,KAAlB,gBAFO,E,yDASRC,EAAsBR,GAEzC,IAAIlC,EPyMD,SAAyB4C,EAAgBC,EAAoBO,GAChE,IAAIC,EACJ,OAAID,IAAelH,EAAIE,GACnBiH,EAAsBrF,EAAgB6E,EAAY,KAC3C,IAAI1G,EAAUkH,EAAqBT,EAAIvG,EAAGuG,EAAItG,IAEhD8G,IAAelH,EAAIG,GACxBgH,EAAsBrF,EAAgB6E,EAAY,KAC3C,IAAI1G,EAAUyG,EAAIxG,EAAGiH,EAAqBT,EAAItG,KAGrD+G,EAAsBrF,EAAgB6E,EAAY,KAC3C,IAAI1G,EAAUyG,EAAIxG,EAAGwG,EAAIvG,EAAGgH,IOrNpB/D,CAAsB/C,KAAK4C,MAAMT,UAAWgE,EAAcR,GAC7E3F,KAAK4C,MAAMc,kBAAkBD,K,+BAK7B,OACE,qCACE,eAACuC,EAAD,WACE,eAACF,EAAD,CAAgBW,QAAS1D,EAAUlD,EAAnC,cAAyCkD,EAAUlD,EAAE6G,cAArD,OACA,cAAC,EAAD,CAAoBf,GAAI5C,EAAUlD,EAAGuD,MAAOpD,KAAK4C,MAAMT,UAAUtC,EAAG+F,aAAc5F,KAAK4F,kBAEzF,eAACI,EAAD,WACE,eAACF,EAAD,CAAgBW,QAAS1D,EAAUjD,EAAnC,cAAyCiD,EAAUjD,EAAE4G,cAArD,OACA,cAAC,EAAD,CAAoBf,GAAI5C,EAAUjD,EAAGsD,MAAOpD,KAAK4C,MAAMT,UAAUrC,EAAG8F,aAAc5F,KAAK4F,kBAEzF,eAACI,EAAD,WACE,eAACF,EAAD,CAAgBW,QAAS1D,EAAUhD,EAAnC,cAAyCgD,EAAUhD,EAAE2G,cAArD,OACA,cAAC,EAAD,CAAoBf,GAAI5C,EAAUhD,EAAGqD,MAAOpD,KAAK4C,MAAMT,UAAUpC,EAAG6F,aAAc5F,KAAK4F,yB,GA/B1EtB,IAAMqC,W,2uBCD7B,IAAMI,GAAerE,IAAOC,IAAV,MAKZqE,GAAYtE,IAAOC,IAAV,MAcTsE,GAAWvE,IAAOO,MAAV,KA2CCiE,G,kDA7Bb,WAAYtE,GAAuB,IAAD,8BAChC,cAAMA,IAEDgD,aAAe,EAAKA,aAAaM,KAAlB,gBAHY,E,yDAUb5C,GACnB,IACIkD,EAAgCzD,EADlBO,EAAME,OAAOJ,OAE/BpD,KAAK4C,MAAMc,kBAAkB8C,K,+BAK7B,IAAIlG,EAAWyC,EAAe/C,KAAK4C,MAAM3B,WACzC,OACE,eAAC8F,GAAD,WACE,cAACC,GAAD,iBACA,cAACC,GAAD,CAAU9D,KAAK,OAAOC,MAAO9C,EAAU+C,SAAUrD,KAAK4F,sB,GAxBvCtB,IAAMqC,W,wRCjC7B,IAAMQ,GAAczE,IAAOC,IAAV,MAMQ,SAAAC,GAAK,OAAIA,EAAMC,mBA8BzBuE,OApBf,SAAoBxE,GAAuC,IAAD,EAEd0B,IAAM+C,SAA0B,IAAItE,EAAgB,IAAK,IAAK,MAFhD,oBAEjDuE,EAFiD,KAElCC,EAFkC,KAIlDC,EAAyBzE,EAAeuE,GAW9C,OACI,cAACH,GAAD,CAAatE,gBAAiB2E,EAAwB9C,QAVnC,SAAC+C,GACtB7E,EAAMc,kBAAkB4D,IASyDI,cANzD,SAACpE,GACzBA,EAAMqE,iBACNJ,EAAiB3E,EAAM3B,e,uOCV3B,IAAM2G,GAAwBlF,IAAOC,IAAV,MAChB,SAAAC,GAAK,OAAIA,EAAMiF,SAIpBC,GAAsBpF,IAAOC,IAAV,MACd,SAAAC,GAAK,OAAIA,EAAMiF,SA6DXE,G,kDAvDb,WAAYnF,GAA0B,IAAD,8BACnC,cAAMA,IACDoF,MAAQ,CACX/G,UAAW,EAAK2B,MAAM3B,UACtBkB,UAAWY,EAAe,EAAKH,MAAM3B,YAEvC,EAAKyC,kBAAoB,EAAKA,kBAAkBwC,KAAvB,gBANU,E,8DAanB+B,GAEhB,GAAIA,aAAqBlF,EAAiB,CACxC,IAAIU,EAAeV,EAAekF,GAClCjI,KAAKkI,SAAS,CAACjH,UAAWgH,EAAW9F,UAAWsB,QAE7C,CACH,IAAI+C,EAAezD,EAAekF,GAClCjI,KAAKkI,SAAS,CAACjH,UAAWuF,EAAcrE,UAAW8F,O,+BAKrD,OACE,qCACE,eAACL,GAAD,CAAuBC,MAAO,IAA9B,UACI,cAAC,EAAD,CAAU5G,UAAWjB,KAAKgI,MAAM/G,UAAWyC,kBAAmB1D,KAAK0D,oBACnE,cAAC,EAAD,CAAUvB,UAAWnC,KAAKgI,MAAM7F,UAAWuB,kBAAmB1D,KAAK0D,oBACnE,cAAC,EAAD,CAAWvB,UAAWnC,KAAKgI,MAAM7F,UAAWuB,kBAAmB1D,KAAK0D,oBACtE,gCACE,cAACoE,GAAD,CAAqBD,MAAO,GAA5B,SACE,cAAC,EAAD,CAAc5G,UAAWjB,KAAKgI,MAAM/G,cAEtC,cAAC6G,GAAD,CAAqBD,MAAO,GAA5B,SACE,cAAC,GAAD,CAAU5G,UAAWjB,KAAKgI,MAAM/G,UAAWyC,kBAAmB1D,KAAK0D,4BAIzE,eAACkE,GAAD,CAAuBC,MAAO,IAA9B,UACE,cAAC,EAAD,CAAa1F,UAAWnC,KAAKgI,MAAM7F,UAAWuB,kBAAmB1D,KAAK0D,oBACtE,cAAC,GAAD,CAAYzC,UAAWjB,KAAKgI,MAAM/G,UAAWyC,kBAAmB1D,KAAK0D,oBACrE,cAAC,GAAD,CAAYzC,UAAWjB,KAAKgI,MAAM/G,UAAWyC,kBAAmB1D,KAAK0D,oBACrE,cAAC,GAAD,CAAYzC,UAAWjB,KAAKgI,MAAM/G,UAAWyC,kBAAmB1D,KAAK0D,oBACrE,cAAC,GAAD,CAAYzC,UAAWjB,KAAKgI,MAAM/G,UAAWyC,kBAAmB1D,KAAK0D,oBACrE,cAAC,GAAD,CAAYzC,UAAWjB,KAAKgI,MAAM/G,UAAWyC,kBAAmB1D,KAAK0D,8B,GAjDrDY,IAAMqC,W,gPC7BhC,IAAMwB,GAAezF,IAAOC,IAAV,MAmBHyF,OATf,WAEE,OACE,cAACD,GAAD,UACE,cAAC,GAAD,CAAalH,UAAW,IAAI8B,EAAgB,IAAI,EAAE,QCNzCsF,I,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.66eabf98.chunk.js","sourcesContent":["export class HSVValues {\n    public h: number;\n    public s: number;\n    public v: number;\n  \n    constructor (h: number, s: number, v: number) {\n      this.h = h;\n      this.s = s;\n      this.v = v;\n    }\n  }\n\nexport class RGBValues{\n    public r: number;\n    public g: number;\n    public b: number;\n  \n    constructor (r: number, g: number, b: number) {\n      this.r = r;\n      this.g = g;\n      this.b = b;\n    }\n  }\n\n\nexport enum RGB {\n    r = \"r\",\n    g = \"g\",\n    b = \"b\"\n}\n\nexport enum HSV {\n    h = \"h\",\n    s = \"s\",\n    v = \"v\"\n}\n\n/**\n * Convert hexadecimal value to HSV\n * @param hexValue string\n * @returns HSV values\n */\nexport function HexToHSV(hexValue: string): HSVValues {\n    let rgbValues: RGBValues = HexToRGB(hexValue);\n    return RGBToHSV(rgbValues);\n}\n\n/**\n * Convert hexadecimal value to RGB\n * @param hexValue string\n * @returns RGB values\n */\nexport function HexToRGB(hexValue: string): RGBValues {\n    if (hexValue.length > 6) {\n        hexValue = hexValue.substring(hexValue.length - 6);\n    } else if (hexValue.length < 6) {\n        let diff = 6 - hexValue.length;\n        hexValue = \"0\".repeat(diff) + hexValue;\n    }\n    let decimalValue: number = parseInt(hexValue, 16);\n    let remainder: number;\n    let r: number = Math.floor(decimalValue/(256*256));\n    remainder = decimalValue%(256*256);\n    let g: number = Math.floor(remainder/256);\n    remainder = remainder%256;\n    let b: number = remainder;\n    return new RGBValues(r, g, b);\n}\n\n/**\n * Convert RGB values to HSV\n * @param rgbValues \n * @returns HSV values\n */\nexport function RGBToHSV(rgbValues: RGBValues): HSVValues {\n    let r = rgbValues.r/255;\n    let g = rgbValues.g/255;\n    let b = rgbValues.b/255;\n\n    let h: number;\n    let s: number;\n    let v: number;\n\n    let maxColor = Math.max(r, Math.max(g,b));\n    let minColor = Math.min(r, Math.min(g,b));\n    let diff = maxColor - minColor;\n\n    h = calculateH(r, g, b, maxColor, diff);\n    s = calculateS(maxColor, diff);\n    v = calculateV(maxColor);\n\n    return new HSVValues(Math.round(h), Math.round(s), Math.round(v));\n}\n\n/**\n * Calculate h value (of HSV) \n * @param r number value between [0,1]\n * @param g number value between [0,1]\n * @param b number value between [0,1]\n * @param maxColor value of largest of R,G,B between [0,1]\n * @param diff difference between highest and lowest values\n * @returns h value between [0,365]\n */\nfunction calculateH(r: number, g: number, b: number, maxColor: number, diff: number): number {\n    let h;\n    if (diff === 0) {\n      h = 0;\n    }\n    else if (maxColor === r) {\n      h = (60 * ((g-b) / diff) + 360)%360;\n    }\n    else if (maxColor === g) {\n      h = (60 * ((b-r) / diff) + 120)%360;\n    }\n    else if (maxColor === b) {\n      h = (60 * ((r-g) / diff) + 240)%360;\n    } else {\n      h = 0;\n    }\n    return h;\n}\n\n/**\n * Calculate the s value (of HSV)\n * @param maxColor largest numeric value of R,G, and B (between [0,1])\n * @param diff difference between largest and smallest numeric values of R,G, and B\n * @returns s value\n */\nfunction calculateS(maxColor: number, diff: number): number {\n    let s;\n    if (maxColor === 0) {\n      s = 0;\n    }\n    else {\n      s = (diff / maxColor) * 100;\n    }\n    return s;\n}\n\n/**\n * Calculate the v value (of HSV)\n * @param maxColor largest numeric value of R,G, and B (between [0,1])\n * @returns v value\n */\nfunction calculateV(maxColor: number): number {\n    let v = maxColor * 100;\n    return v;\n  }\n\n\n/**\n* Formats a string to be between 0-255 appropriately\n* @param numStr String which represents a number\n*/\nexport function formatNumString(numStr: string, high: number): number {\n    let length = numStr.length;\n    if (length === 0) {\n        return 0;\n    }\n\n    let formattedNum = parseInt(numStr);\n\n    if (formattedNum > high) {\n      formattedNum = high;\n    }\n\n    return formattedNum;\n}\n\n/**\n * Given HSV values, convert to hexadecimal string\n * @param hsvValues \n */\nexport function HSVToHex(hsvValues: HSVValues): string {\n    let rgbValues: RGBValues = HSVToRGB(hsvValues);\n    return RGBToHex(rgbValues);\n}\n\n/**\n * Given RGB values, convert to hexadecimal string\n * @param rgbValues \n */\nexport function RGBToHex(rgbValues: RGBValues): string {\n    let hexString = numTo2DigitHex(rgbValues.r) + numTo2DigitHex(rgbValues.g) + numTo2DigitHex(rgbValues.b);\n    return hexString\n}\n\n/**\n * Convert number to 2-digit hex format\n * @param num number between 0-255\n * @returns hex value as string\n */\nfunction numTo2DigitHex(num: number): string {\n    let hex = num.toString(16);\n    if (hex.length === 1) {\n      hex = \"0\" + hex;\n    }\n    return hex;\n}\n\n/**\n * Generate new RGB values given the old values and the value that changed\n * @param old the RGB values that will be changed\n * @param changedVal the new R, G, or B value\n * @param changedRGB identifies if the value is for R, G, or B\n */\nexport function getNewRGBValues(old: RGBValues, changedVal: number, changedRGB: RGB): RGBValues {\n    if (changedRGB=== RGB.r) {\n        return new RGBValues(changedVal, old.g, old.b);\n    }\n    else if (changedRGB=== RGB.g) {\n        return new RGBValues(old.r, changedVal, old.b);\n    }\n    else {\n        return new RGBValues(old.r, old.g, changedVal);\n    }\n}\n\n/**\n * Generate new HSV values given the old values and the value that changed\n * @param old the HSV values that will be changed\n * @param changedVal the new H, S, or V value\n * @param changedHSV identifies if the value is for H, S, or V\n */\nexport function getNewHSVValues(old: HSVValues, changedVal: string, changedHSV: HSV): HSVValues {\n    let formattedChangedVal: number;\n    if (changedHSV === HSV.h) {\n        formattedChangedVal = formatNumString(changedVal, 300)\n        return new HSVValues(formattedChangedVal, old.s, old.v);\n    }\n    else if (changedHSV === HSV.s) {\n        formattedChangedVal = formatNumString(changedVal, 100)\n        return new HSVValues(old.h, formattedChangedVal, old.v);\n    }\n    else {\n        formattedChangedVal = formatNumString(changedVal, 100)\n        return new HSVValues(old.h, old.s, formattedChangedVal);\n    }\n}\n\n/**\n* HSV to RGB color conversion\n* Found at <script src=\"https://gist.github.com/eyecatchup/9536706.js\"></script>\n* H runs from 0 to 360 degrees\n* S and V run from 0 to 100\n*/\nexport function HSVToRGB(hsvValues: HSVValues): RGBValues {\n    let r, g, b;\n    let i;\n    let f, p, q, t;\n     \n    // Make sure our arguments stay in-range\n    let h = Math.max(0, Math.min(360, hsvValues.h));\n    let s = Math.max(0, Math.min(100, hsvValues.s));\n    let v = Math.max(0, Math.min(100, hsvValues.v));\n     \n    s /= 100;\n    v /= 100;\n     \n    if(s === 0) {\n        // Achromatic (grey)\n        r = g = b = v;\n        return new RGBValues(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255));\n    }\n     \n    h /= 60; // sector 0 to 5\n    i = Math.floor(h);\n    f = h - i; // remainder part of h\n    p = v * (1 - s);\n    q = v * (1 - s * f);\n    t = v * (1 - s * (1 - f));\n     \n    switch(i) {\n        case 0:\n            r = v;\n            g = t;\n            b = p;\n            break;\n        case 1:\n            r = q;\n            g = v;\n            b = p;\n            break;\n        case 2:\n            r = p;\n            g = v;\n            b = t;\n            break;\n        case 3:\n            r = p;\n            g = q;\n            b = v;\n            break;\n        case 4:\n            r = t;\n            g = p;\n            b = v;\n            break;\n        default:\n            r = v;\n            g = p;\n            b = q;\n    }\n     \n    return new RGBValues(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255));\n}\n\n    \n  ","import { ReactElement } from \"react\";\nimport * as Color from \"./ColorModule\";\nimport styled from \"styled-components\";\n\ntype ColorDislayProps = {\n    rgbValues: Color.RGBValues;\n}\n\ntype ColorDivProps = {\n  backgroundColor: string;\n}\n\nconst ColorDiv = styled.div<ColorDivProps>`\n    width: 50px;\n    height: 50px;\n    display: block;\n    margin: 12px 22px 12px 12px;\n    background-color: #${props => props.backgroundColor};\n    float: right;\n  `;\n\nfunction ColorDisplay(props: ColorDislayProps): ReactElement {\n\n  const backgroundColor =  Color.RGBToHex(props.rgbValues);\n\n  return(\n    <ColorDiv backgroundColor={backgroundColor}/>\n  );\n}\n\nexport default ColorDisplay;","import React, { ReactElement } from \"react\";\nimport * as Color from \"./ColorModule\";\nimport styled from \"styled-components\";\n\ntype HueSliderProps = {\n    hsvValues: Color.HSVValues; \n    handleColorChange: (hsvValues: Color.HSVValues) => void;\n}\n\nconst Slider = styled.input`\n  -webkit-appearance: none;\n  width: 245px;\n  margin-left: 8px;\n  margin-top: 8px;\n  :focus {\n    outline: none;\n  }\n  ::-webkit-slider-runnable-track {\n    height: 20px;\n    background-image: linear-gradient(to right, red, yellow, green, blue, indigo, violet);\n    border: solid;\n    border-color: #989898;\n    border-width: 1px;\n    border-radius: 3px;\n  };\n  ::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    border: none;\n    height: 30px;\n    width: 10px;\n    border-radius: 20%;\n    border-style: solid;\n    border-width: 1px;\n    border-color: #989898;\n    background-color: rgba(152, 152, 152, .4);\n    margin-top: -6px;\n    :hover {\n    background-color:  rgba(152, 152, 152, .6);\n    }\n    :active {\n    background-color:  rgba(152, 152, 152, .4);\n  }\n};\n`;\n\nfunction HueSlider(props: HueSliderProps): ReactElement {\n\n  /**\n   * Change handler passed to the HSV child component\n   * @param newHSVValues updated HSV values\n   */\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let newHue = event.target.value;\n    let newHSVValues = new Color.HSVValues(parseInt(newHue), props.hsvValues.s, props.hsvValues.v);\n    props.handleColorChange(newHSVValues);\n  }\n\n  return( \n    <>\n      <Slider type=\"range\" min=\"0\" max=\"360\" value={props.hsvValues.h} onChange={handleChange}></Slider> \n    </>\n  );\n}\n\nexport default HueSlider;","import React, { ReactElement } from \"react\";\nimport * as Color from \"./ColorModule\";\nimport styled from \"styled-components\";\n\ntype ColorDislayProps = {\n    hsvValues: Color.HSVValues;\n    handleColorChange: (newValues: Color.HSVValues) => void;\n}\n\ntype GradientProperties = {\n  hexVal: string;\n}\n\nconst GradientDivOuter = styled.div<GradientProperties>`\n  width: 200px;\n  height: 200px;\n  background: rgb(255,255,255);\n  background: linear-gradient(90deg, #ffffff 0%, #${props => props.hexVal} 100%);\n  margin: 0px 0px 15px 10px;\n`;\n\nconst GradientDivInner = styled.div`\n  width: 200px;\n  height: 200px;\n  background: linear-gradient( rgba(255,255,255,0) 0%, rgba(0,0,0,1) 100%);\n`;\n\ntype CurrentLocDivProps = {\n  left: number;\n  top: number;\n}\n\nconst CurrentLocDiv = styled.div<CurrentLocDivProps>`\n  position: absolute;\n  left: ${props => props.left}px;\n  top: ${props => props.top}px;\n  height: 4px;\n  width: 4px;\n  border-radius: 2px;\n  background-color: white;\n`;\n\n/**\n * typing for click event properties used\n */\ntype ClickEvent = {\n  pageX: number;\n  pageY: number;\n  target: {\n    offsetTop: number;\n    offsetLeft: number;\n  }\n}\n\n/**\n * Given a click event on the gradient div, generates new color in HSV format\n * @param clickEvent \n * @param currentHue \n */\nfunction convertClickToNewHSV(clickEvent: ClickEvent, currentHue: number): Color.HSVValues {\n  let trueX = clickEvent.pageX - clickEvent.target.offsetLeft;\n  let trueY = clickEvent.pageY - clickEvent.target.offsetTop;\n  let newSaturation = Math.floor(trueX/2);\n  let newValue = Math.floor((200-trueY)/2);\n\n  return new Color.HSVValues(currentHue, newSaturation, newValue);\n}\n\n/**\n * Calculate the left position of the pointer within the gradient div.\n * @param offsetLeft left offset of gradient div in relation to page\n * @param saturation s from HSV\n */\nfunction calculateLeftPosOfPtr(offsetLeft: number, saturation: number): number {\n  return offsetLeft + 2 * saturation;\n}\n\n/**\n * Calculate the top position of the pointer within the gradient div.\n * @param offsetTop top offset of gradient div in relation to page\n * @param value v from HSV\n */\nfunction calculateTopPosOfPtr(offsetTop: number, value: number): number {\n  return offsetTop + 2 * (100 - value);\n}\n\nfunction ColorMatrix(props: ColorDislayProps): ReactElement {\n\n  const gradDiv = React.useRef<HTMLDivElement | null>(null);\n\n  const handleColorSelect = ( event: any): void => {\n    let newHSVValues = convertClickToNewHSV(event, props.hsvValues.h);\n    props.handleColorChange(newHSVValues);\n  };\n\n  \n  let fullyVividHex = Color.HSVToHex(new Color.HSVValues(props.hsvValues.h, 100, 100));\n\n  let left = 0;\n  let top = 0;\n\n  if (gradDiv && gradDiv.current) {\n    left = calculateLeftPosOfPtr(gradDiv.current.offsetLeft, props.hsvValues.s);\n    top = calculateTopPosOfPtr(gradDiv.current.offsetTop, props.hsvValues.v);\n  }\n\n  return(\n    <GradientDivOuter hexVal={fullyVividHex}>\n      <GradientDivInner onClick={handleColorSelect} ref={gradDiv}>\n        { <CurrentLocDiv left={left} top={top} /> }\n      </GradientDivInner>\n    </GradientDivOuter>\n  );\n}\n\nexport default ColorMatrix;","import { ReactElement, MouseEvent } from \"react\";\nimport * as Color from \"./ColorModule\";\nimport styled from \"styled-components\"\n\ntype PMTextInputProps = {\n  id: string;\n  value: number;\n  handleChange: (value: string, id: string) => void;\n}\n\nconst BtnTopRight = styled.button`\n  display: block;\n  height: 17px;\n  background-color: white;\n  border-style:none;\n  padding-left: 5px;\n  padding-right: 3px;\n`;\n\nconst BtnBottomLeft = styled.button`\n  display: block;\n  height: 16px;\n  background-color: white;\n  border-style: none;\n  padding: 0px 5px 2px 7px;\n`;\n\nconst BtnContainer = styled.div`\n  display: inline-block;\n  vertical-align: bottom;\n  border-color: #989898;\n  border-style: solid solid solid none;\n  border-width: 1px;\n  width: 16px;\n  border-top-right-radius: 3px;\n  border-bottom-right-radius:3px;\n`;\n\nconst TextInput = styled.input`\n  display: inline-block;\n  width: 50px;\n  font-size: 26px;\n  border-color: #989898;\n  border-style: solid none solid solid;\n  background-color: white;\n  border-width: 1px;\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n`;\n\n\nfunction PlusMinusTextInput(props: PMTextInputProps): ReactElement {\n\n  /**\n   * Callback for the plus button, increments the value stored by 1\n   * @param event \n   */\n  const plusBtnCallback = (event: MouseEvent<HTMLButtonElement>) => {\n    let newValue = props.value+1;\n    let newValueStr = newValue.toString();\n    props.handleChange(newValueStr, props.id);\n  }\n  \n  /**\n   * Callback for the minus button, decrements the value stored by 1\n   * @param event \n   */\n  const minusBtnCallback = (event: MouseEvent<HTMLButtonElement>) => {\n    let newValue = props.value-1;\n    let newValueStr = newValue.toString();\n    props.handleChange(newValueStr, props.id);\n  }\n  \n  /**\n   * Callback for a typed changes, updates to value typed\n   * @param event \n   */\n  const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let value = event.target.value;\n    let id = event.target.id as Color.RGB;\n    props.handleChange(value, id);\n  }\n\n  return(\n  <>\n    <TextInput type=\"text\" id={props.id} value={props.value} onChange={handleTextChange}></TextInput>\n    <BtnContainer>\n      <BtnTopRight onClick={plusBtnCallback}>+</BtnTopRight>\n      <BtnBottomLeft onClick={minusBtnCallback}>-</BtnBottomLeft>\n    </BtnContainer>  \n  </>  \n  );\n}\n\nexport default PlusMinusTextInput;","import styled from \"styled-components\";\n\nexport const PlusMinusLabel = styled.label`\n  display: block;\n  font-size: 20px;\n`;\n\nexport const InputLabelPair = styled.div`\n   display: inline-block;\n   margin: 8px;\n`;","import React from \"react\";\nimport * as Color from \"./ColorModule\";\nimport PlusMinusTextInput from \"./PlusMinusTextInput\";\nimport { InputLabelPair, PlusMinusLabel } from \"./styles/SharedCompStyles\";\n\ntype RGBProps = {\n  rgbValues: Color.RGBValues; \n  handleColorChange: (rgbValues: Color.RGBValues) => void;\n}\n\nclass RGBInput extends React.Component<RGBProps> {\n  \n  constructor(props: RGBProps) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Handler for when R, G, or B value is changed\n   * @param event Change event\n   */\n  handleChange(changedValue: string, id: string): void {\n    let formattedValue = Color.formatNumString(changedValue, 255);\n    if (id === null) return;\n\n    let newRGBValues = Color.getNewRGBValues(this.props.rgbValues, formattedValue, id as Color.RGB);\n  \n    this.props.handleColorChange(newRGBValues);\n  }\n  \n   \n  render() {\n    return(\n      <>\n        <InputLabelPair>\n          <PlusMinusLabel htmlFor={Color.RGB.r}> { Color.RGB.r.toUpperCase() }:</PlusMinusLabel>\n          <PlusMinusTextInput id={Color.RGB.r} value={this.props.rgbValues.r} handleChange={this.handleChange}/>     \n        </InputLabelPair>\n        <InputLabelPair>\n          <PlusMinusLabel htmlFor={Color.RGB.g}> { Color.RGB.g.toUpperCase() }:</PlusMinusLabel>\n          <PlusMinusTextInput id={Color.RGB.g} value={this.props.rgbValues.g} handleChange={this.handleChange}/>     \n        </InputLabelPair>\n        <InputLabelPair>\n          <PlusMinusLabel htmlFor={Color.RGB.b}> { Color.RGB.b.toUpperCase() }:</PlusMinusLabel>\n          <PlusMinusTextInput id={Color.RGB.b} value={this.props.rgbValues.b} handleChange={this.handleChange}/>     \n        </InputLabelPair>\n      </>\n    );\n  }\n\n}\n\nexport default RGBInput;","import React from \"react\";\nimport * as Color from \"./ColorModule\";\nimport PlusMinusTextInput from \"./PlusMinusTextInput\";\nimport { InputLabelPair, PlusMinusLabel } from \"./styles/SharedCompStyles\";\n\ntype HSVProps = {\n    handleColorChange: (hsvValues: Color.HSVValues) => void;\n    hsvValues: Color.HSVValues;\n}\n\nclass HSVInput extends React.Component<HSVProps> {\n  \n  constructor(props: HSVProps) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Handler for when a field's value is changed\n   * @param event Change event\n   */\n  private handleChange(changedValue: string, id: string): void {\n   \n    let newHSVValues = Color.getNewHSVValues(this.props.hsvValues, changedValue, id as Color.HSV);\n    this.props.handleColorChange(newHSVValues);\n  }\n\n  \n  render() {\n    return(\n      <>\n        <InputLabelPair>\n          <PlusMinusLabel htmlFor={Color.HSV.h}> { Color.HSV.h.toUpperCase() }:</PlusMinusLabel>\n          <PlusMinusTextInput id={Color.HSV.h} value={this.props.hsvValues.h} handleChange={this.handleChange}/>     \n        </InputLabelPair>\n        <InputLabelPair>\n          <PlusMinusLabel htmlFor={Color.HSV.s}> { Color.HSV.s.toUpperCase() }:</PlusMinusLabel>\n          <PlusMinusTextInput id={Color.HSV.s} value={this.props.hsvValues.s} handleChange={this.handleChange}/>     \n        </InputLabelPair>\n        <InputLabelPair>\n          <PlusMinusLabel htmlFor={Color.HSV.v}> { Color.HSV.v.toUpperCase() }:</PlusMinusLabel>\n          <PlusMinusTextInput id={Color.HSV.v} value={this.props.hsvValues.v} handleChange={this.handleChange}/>     \n        </InputLabelPair>\n    </>\n    );\n  } \n\n}\n\nexport default HSVInput;","import React from \"react\";\nimport * as Color from \"./ColorModule\";\nimport styled from \"styled-components\";\n\ntype HexInputProps = {\n    rgbValues: Color.RGBValues,\n    handleColorChange: (hsvValues: Color.RGBValues) => void;\n}\n\nconst HexContainer = styled.div`\nfloat: right;\nmargin: 20px 14px 20px;\n`;\n\nconst HexPrefix = styled.div`\ndisplay: inline-block;\nwidth: 28px;\nheight: 33px;\nfont-size: 26px;\ncolor: #989898;\nborder-color: #989898;\nborder-style: solid none solid solid;\nbackground-color: white;\nborder-width: 1px;\nborder-top-left-radius: 3px;\nborder-bottom-left-radius: 3px;\n`;\n\nconst HexField = styled.input`\ndisplay: inline-block;\nwidth: 96px;\nfont-size: 26px;\nborder-color: #989898;\nborder-style: solid solid solid none;\nbackground-color: white;\nborder-width: 1px;\nborder-top-right-radius: 3px;\nborder-bottom-right-radius: 3px;\n`;\n\nclass HexInput extends React.Component<HexInputProps> {\n   \n  constructor(props: HexInputProps) {\n    super(props);\n      \n    this.handleChange = this.handleChange.bind(this);\n  }\n  \n  /**\n   * Change handler for input field\n   * @param event change event for input field\n   */\n  private handleChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    let newHexValue = event.target.value;\n    let newRGBValues: Color.RGBValues = Color.HexToRGB(newHexValue);\n    this.props.handleColorChange(newRGBValues);\n  }\n  \n  render() {\n\n    let hexValue = Color.RGBToHex(this.props.rgbValues);\n    return(\n      <HexContainer>\n        <HexPrefix>0x</HexPrefix>\n        <HexField type=\"text\" value={hexValue} onChange={this.handleChange}></HexField>  \n      </HexContainer>\n    );\n  }\n\n}\n\nexport default HexInput;","import React, { ReactElement } from \"react\";\nimport * as Color from \"./ColorModule\";\nimport styled from \"styled-components\";\n\ntype ColorSquareProps = {\n  backgroundColor: string;\n}\nconst ColorSquare = styled.div<ColorSquareProps>`\n    width: 14px;\n    height: 14px;\n    border: 1px;\n    border-style: solid;\n    border-color: #989898;\n    background-color: #${props => props.backgroundColor};\n    display: inline-block;\n    margin: 0px 14px 0px 14px;\n`;\n\ntype SavedColorProps = {\n  rgbValues: Color.RGBValues;\n  handleColorChange: (newValues: Color.RGBValues) => void;\n}\n\nfunction SavedColor(props: SavedColorProps): ReactElement {\n\n  const [selectedColor, setSelectedColor] = React.useState<Color.RGBValues>(new Color.RGBValues(255, 255, 255));\n\n  const selectedColorFormatted = Color.RGBToHex(selectedColor);\n\n  const onClickHandler = (_event: React.MouseEvent<HTMLDivElement>): void => {\n    props.handleColorChange(selectedColor);\n  };\n\n  const handleContextMenu = (event: React.MouseEvent<HTMLDivElement>): void => {\n    event.preventDefault();\n    setSelectedColor(props.rgbValues);\n  }\n\n  return(\n      <ColorSquare backgroundColor={selectedColorFormatted} onClick={onClickHandler} onContextMenu={handleContextMenu}/>\n  );\n}\n\nexport default SavedColor;","import React from \"react\";\nimport ColorDisplay from \"./ColorDisplay\";\nimport HueSlider from \"./HueSlider\";\nimport ColorMatrix from \"./ColorMatrix\";\nimport * as Color from \"./ColorModule\";\nimport RGBInput from \"./RGBInput\";\nimport HSVInput from \"./HSVInput\";\nimport HexInput from \"./HexInput\";\nimport styled from \"styled-components\";\nimport SavedColor from \"./SavedColor\";\n\n  \ntype ColorPickerProps = {\n  rgbValues: Color.RGBValues;\n}\n\ntype ColorPickerState = {\n    hsvValues: Color.HSVValues;\n    rgbValues: Color.RGBValues;\n}\n\ntype WidthInlineDivProps = {\n  width: number;\n}\n\nconst FixedWidthInlineBlock = styled.div<WidthInlineDivProps>`\n  width: ${props => props.width}px;\n  display: inline-block;\n`;\n\nconst PctWidthInlineBlock = styled.div<WidthInlineDivProps>`\n  width: ${props => props.width}%;\n  display: inline-block;\n`;\n\nclass ColorPicker extends React.Component<ColorPickerProps, ColorPickerState> {\n  \n  constructor(props: ColorPickerProps) {\n    super(props);\n    this.state = {\n      rgbValues: this.props.rgbValues,\n      hsvValues: Color.RGBToHSV(this.props.rgbValues)\n    };\n    this.handleColorChange = this.handleColorChange.bind(this);\n  }\n\n  /**\n   * Handler for when the color value is changed.\n   * @param changedValue changed hexadecimal color value\n   */\n  handleColorChange(newValues: Color.HSVValues | Color.RGBValues): void {  \n    debugger;\n    if (newValues instanceof Color.RGBValues) {\n      let newHSVValues = Color.RGBToHSV(newValues);\n      this.setState({rgbValues: newValues, hsvValues: newHSVValues});\n    }\n    else {\n      let newRGBValues = Color.HSVToRGB(newValues);\n      this.setState({rgbValues: newRGBValues, hsvValues: newValues});\n    }\n  }\n    \n  render() {\n    return (\n      <>\n        <FixedWidthInlineBlock width={270}>\n            <RGBInput rgbValues={this.state.rgbValues} handleColorChange={this.handleColorChange}/>\n            <HSVInput hsvValues={this.state.hsvValues} handleColorChange={this.handleColorChange}/>\n            <HueSlider hsvValues={this.state.hsvValues} handleColorChange={this.handleColorChange} />\n          <div>\n            <PctWidthInlineBlock width={40}>\n              <ColorDisplay rgbValues={this.state.rgbValues}/>\n            </PctWidthInlineBlock>\n            <PctWidthInlineBlock width={60}>\n              <HexInput rgbValues={this.state.rgbValues} handleColorChange={this.handleColorChange}/>\n            </PctWidthInlineBlock>\n          </div>\n        </FixedWidthInlineBlock>\n        <FixedWidthInlineBlock width={225}>\n          <ColorMatrix hsvValues={this.state.hsvValues} handleColorChange={this.handleColorChange}/>\n          <SavedColor rgbValues={this.state.rgbValues} handleColorChange={this.handleColorChange}/>\n          <SavedColor rgbValues={this.state.rgbValues} handleColorChange={this.handleColorChange}/>\n          <SavedColor rgbValues={this.state.rgbValues} handleColorChange={this.handleColorChange}/>\n          <SavedColor rgbValues={this.state.rgbValues} handleColorChange={this.handleColorChange}/>\n          <SavedColor rgbValues={this.state.rgbValues} handleColorChange={this.handleColorChange}/>\n        </FixedWidthInlineBlock>\n      </> \n    );\n  }\n\n}\n  \nexport default ColorPicker;","import './ColorPicker';\nimport ColorPicker from './ColorPicker';\nimport * as Color from './ColorModule';\nimport { ReactElement } from 'react';\nimport styled from \"styled-components\";\n\nconst AppContainer = styled.div`\n  margin: 40px auto auto auto;\n  max-width: 495px;\n  border-style: solid;\n  border-color: #989898;\n  border-width: 1px;\n  border-radius: 10px;\n  padding: 30px;\n`;\n\nfunction App(): ReactElement {\n\n  return (\n    <AppContainer>\n      <ColorPicker rgbValues={new Color.RGBValues(255,0,0)}/>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./styles/index.css\"\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}